# vim: ts=2 sw=2 et
version: '2.2'
services:

  db:
    restart: always
    image: postgres:9.6-alpine
    networks:
      - db_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
    volumes:
      - /srv/mastodon/vulpine.club/postgres:/var/lib/postgresql/data

  redis:
    restart: always
    image: redis:4.0-alpine
    networks:
      - redis_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    volumes:
      - /srv/mastodon/vulpine.club/redis:/data

  es:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.4
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - es_network
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    volumes:
      - /srv/mastodon/vulpine.club/elasticsearch:/usr/share/elasticsearch/data

  web:
    image: vulpineclub/mastodon:production
    restart: always
    scale: 2
    env_file: .env.production
    # are these envs necessary?
    environment:
      - WEB_CONCURRENCY=2
      - MAX_THREADS=15
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000 -b '0.0.0.0'"
    networks:
      external_network:
      db_network:
      es_network:
      redis_network:
      internal_network:
        aliases:
          - fe_web
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --header 'x-forwarded-proto: https' --proxy=off localhost:3000/api/v1/instance || exit 1"]
    depends_on:
      - db
      - redis
      - es
    volumes:
      - /srv/mastodon/vulpine.club/public/system:/mastodon/public/system
      - /etc/localtime:/etc/localtime:ro

  streaming:
    image: vulpineclub/mastodon:production
    restart: always
    scale: 2
    env_file: .env.production
    command: yarn start
    networks:
      external_network:
      db_network:
      redis_network:
      internal_network:
        aliases:
          - fe_streaming
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --header 'x-forwarded-proto: https' --proxy=off localhost:4000/api/v1/streaming/health || exit 1"]
    depends_on:
      - db
      - redis

  sidekiq:
    image: vulpineclub/mastodon:production
    restart: always
    scale: 1
    env_file: .env.production
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - external_network
      - db_network
      - es_network
      - redis_network
    volumes:
      - /srv/mastodon/vulpine.club/public/system:/mastodon/public/system

## Uncomment to enable federation with tor instances along with adding the following ENV variables
## http_proxy=http://privoxy:8118
## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
#  tor:
#    image: sirboops/tor
#    networks:
#      - external_network
#      - internal_network
#
#  privoxy:
#    image: sirboops/privoxy
#    volumes:
#      - ./priv-config:/opt/config
#    networks:
#      - external_network
#      - internal_network

# local additions
  ambassador:
    restart: always
    image: vulpineclub/ambassador
    env_file: .env.ambassador
    command: yarn start
    depends_on:
      - db
    networks:
      - external_network
      - db_network

  # easy client access to the db server side of things
  dbbackup:
    restart: "no"
    image: postgres:9.6-alpine
    env_file: .env.production
    command: sh -c "psql -h $${DB_HOST} -p $${DB_PORT} -d $${DB_NAME} -U $${DB_USER}"
    cpus: 0.25
    depends_on:
      - db
    networks:
      - db_network
    volumes:
      - /srv/mastodon/vulpine.club/pg_dump:/dump

  # front end web server
  # https://hub.docker.com/r/xcgd/nginx-vts
  # now using an image with vts so we have more metrics about how nginx is replying to users
  nginx:
    restart: always
    image: xcgd/nginx-vts:mainline
    depends_on:
      - web
      - streaming
    ports:
      - "80:80"
      - "443:443"
    networks:
      external_network:
        ipv6_address: 2600:3c03:e000:27b::e621:10
      internal_network:
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /etc/nginx:/etc/nginx
      - /srv/mastodon/vulpine.club/public:/srv/mastodon/vulpine.club/public
      - /srv/mastodon/vulpine.club/nginx_cache:/var/cache/nginx
      - /srv/mastodon/vulpine.club/nginx_logs:/var/log/nginx

  prometheus:
    restart: always
    image: prom/prometheus
    # TODO depends_on
    networks:
      - monitoring_network
    volumes:
      - /srv/mastodon/vulpine.club/monitoring-and-alerting/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - /srv/mastodon/vulpine.club/monitoring-and-alerting/prometheus/data:/prometheus

  prometheus_sidekiq_exporter:
    restart: always
    image: alexand/sidekiq-prometheus-exporter
    networks:
      monitoring_network:
        aliases:
          - sidekiq-exporter
      redis_network:

  prometheus_elasticsearch_exporter:
    restart: always
    image: justwatch/elasticsearch_exporter:1.0.2
    command:
     - '-es.uri=http://es:9200'
    networks:
      monitoring_network:
        aliases:
          - elasticsearch-exporter
      es_network:

  prometheus_node_exporter:
    restart: always
    image: prom/node-exporter:v0.15.2
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      monitoring_network:
        aliases:
          - node-exporter

  prometheus_nginx_exporter:
    restart: always
    image: nginx/nginx-prometheus-exporter:0.2.0
    command:
      - '-nginx.scrape-uri=http://nginx/stub_stats'
    networks:
      monitoring_network:
        aliases:
          - nginx-exporter
      internal_network:

  prometheus_mastodon_exporter:
    restart: always
    build: /srv/mastodon/vulpine.club/monitoring-and-alerting/mastodon-prometheus-exporter
    image: vulpineclub/mastodon-exporter:latest
    environment:
     - 'MASTODON_HOST=https://nginx/'
    networks:
      monitoring_network:
        aliases:
          - mastodon-exporter
      internal_network:

  prometheus_nginx_vts_exporter:
    restart: always
    image: sophos/nginx-vts-exporter:latest
    environment:
     - 'NGINX_STATUS=http://nginx/vts_stats'
    networks:
      monitoring_network:
        aliases:
          - nginx-vts-exporter
      internal_network:

  grafana:
    restart: always
    image: grafana/grafana:5.3.2
    volumes:
      - /srv/mastodon/vulpine.club/monitoring-and-alerting/grafana/lib:/var/lib/grafana
      - /srv/mastodon/vulpine.club/monitoring-and-alerting/grafana/grafana.ini:/etc/grafana/grafana.ini
      - /srv/mastodon/vulpine.club/monitoring-and-alerting/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    networks:
      - monitoring_network
      - internal_network
      - external_network
    links:
      - prometheus

networks:
  external_network:
    driver: bridge
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: 172.31.0.0/16
        - subnet: 2600:3c03:e000:027b::/64
  internal_network:
    internal: true
  db_network:
    internal: true
  redis_network:
    internal: true
  es_network:
    internal: true
  monitoring_network:
    internal: true

